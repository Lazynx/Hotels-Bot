from loader import bot
from config_data import config as c
from utils import work_with_api as api
from states.user_information import UserInfoState
from database import work_with_db as db

import json
import re

from telegram_bot_calendar import WYearTelegramCalendar
import datetime

from loguru import logger

from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from requests import Response


class MyStyleCalendar(WYearTelegramCalendar):
    """ –ö–ª–∞—Å—Å –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏. """
    prev_button = "‚¨ÖÔ∏è"
    next_button = "‚û°Ô∏è"
    empty_month_button = ""
    empty_year_button = ""


def form_media_group(photos: list, text: str) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è "form_media_group" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã.
    """
    media = []
    num = 0
    for photo in photos:
        if api.check_foto(photo[1]):
            media.append(InputMediaPhoto(media=photo[1], caption=text if num == 0 else ''))
            num += 1
        else:
            continue
    return media


def city_founding(response: Response) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è "city_founding" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.
    """
    pattern = r'(?<="CITY_GROUP",).+?[\]]'
    find = re.search(pattern, response)
    suggestions = []
    if find:
        suggestions = json.loads(f"{{{find[0]}}}")
    cities = list()
    for dest_id in suggestions['entities']:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        clear_destination = re.sub(r"<span class='highlighted'>(.*)</span>", r'\1', dest_id['caption'])
        if re.search(r"</span>(.*)<span class='highlighted'>", clear_destination):
            full_clear_destination = re.sub(r"</span>(.*)<span class='highlighted'>", '-', clear_destination)
            cities.append({'city_name': full_clear_destination, 'destination_id': dest_id['destinationId']})
        else:
            cities.append({'city_name': clear_destination, 'destination_id': dest_id['destinationId']})
    return cities


def city_markup(message: Message) -> InlineKeyboardMarkup:
    """
    –§—É–Ω–∫—Ü–∏—è "city_markup" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    """
    cities = city_founding(message)
    destinations = InlineKeyboardMarkup()
    for i_city in cities:
        destinations.add(InlineKeyboardButton(text=i_city['city_name'],
                                              callback_data=f'{i_city["destination_id"]}'))

    return destinations


@bot.callback_query_handler(func=lambda call: call.data.isdigit())
def get_city_id(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_city_id" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –ü–æ–ª—É—á–µ–Ω–∏—è ID –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–± —ç—Ç–æ–º.
    2.–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - '/bestdeal', —Ç–æ –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ü–µ–Ω.
      –ï—Å–ª–∏ –¥–≤–µ –¥—Ä—É–≥–∏–µ, —Ç–æ –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞.
    """
    if call.message:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        logger.info('ID –≥–æ—Ä–æ–¥–∞: {}'.format(call.data))
        bot.set_state(call.from_user.id, UserInfoState.city_id, call.message.chat.id)
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['city_id'] = call.data
            if data['commands'] == 'bestdeal':
                bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω\n'
                                                    '(—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ -):')
            else:
                today = datetime.date.today()
                calendar, step = get_calendar(calendar_id=1,
                                              current_date=today,
                                              min_date=today,
                                              max_date=today + datetime.timedelta(days=365),
                                              locale="ru")

                bot.set_state(call.from_user.id, UserInfoState.check_in, call.message.chat.id)
                bot.send_message(call.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:')
                bot.send_message(call.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ {c.LSTEP[step]}:", reply_markup=calendar)


@bot.message_handler(state=UserInfoState.city_id)
def get_prices(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_prices" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –ü–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –∑–∞ –æ—Ç–µ–ª—å –∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–± —ç—Ç–æ–º.
    2. –û–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.
    """
    try:
        prices = re.split(r'\D', message.text)
        min_price, max_price = int(prices[0]), int(prices[1])
        if 1 < min_price < max_price:
            bot.set_state(message.from_user.id, UserInfoState.min_price, message.chat.id)
            bot.set_state(message.from_user.id, UserInfoState.max_price, message.chat.id)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['min_price'] = min_price
                data['max_price'] = max_price
                logger.info('–ú–∏–Ω. —Ü–µ–Ω–∞ - {}   –ú–∞–∫—Å. —Ü–µ–Ω–∞ - {}'.format(data['min_price'], data['max_price']))
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–∫–º.):')
        else:
            raise IndexError
    except (IndexError, TypeError):
        bot.send_message(message.from_user.id, text='–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.')


@bot.message_handler(state=UserInfoState.max_price)
def get_distances(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_distances" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –ü–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–µ–ª—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–± —ç—Ç–æ–º.
    """
    if message.text.isdigit() and float(message.text) > 0:
        bot.set_state(message.from_user.id, UserInfoState.distance, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['distance'] = float(message.text)
            logger.info('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {}'.format(data['distance']))
        today = datetime.date.today()
        calendar, step = get_calendar(calendar_id=1,
                                      current_date=today,
                                      min_date=today,
                                      max_date=today + datetime.timedelta(days=365),
                                      locale="ru")

        bot.set_state(message.from_user.id, UserInfoState.check_in, message.chat.id)
        bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:')
        bot.send_message(message.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ {c.LSTEP[step]}:", reply_markup=calendar)
    else:
        bot.send_message(message.from_user.id, text='–û—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –≤–≤–æ–¥–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.')


def get_calendar(is_process=False, callback_data=None, **kwargs) -> WYearTelegramCalendar:
    """
    –§—É–Ω–∫—Ü–∏—è "get_calendar" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –°–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏.
    """
    if is_process:
        result, key, step = MyStyleCalendar(calendar_id=kwargs['calendar_id'],
                                            current_date=kwargs.get('current_date'),
                                            min_date=kwargs['min_date'],
                                            max_date=kwargs['max_date'],
                                            locale=kwargs['locale']).process(callback_data.data)
        return result, key, step
    else:
        calendar, step = MyStyleCalendar(calendar_id=kwargs['calendar_id'],
                                         current_date=kwargs.get('current_date'),
                                         min_date=kwargs['min_date'],
                                         max_date=kwargs['max_date'],
                                         locale=kwargs['locale']).build()
        return calendar, step


@bot.callback_query_handler(func=MyStyleCalendar.func(calendar_id=1))
def get_check_in(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_check_in" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –û—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏ –∑–∞–µ–∑–¥–∞
    2. –ó–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.
    3. –û–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–∞—Ç–µ –≤—ã–µ–∑–¥–∞.
    """
    today = datetime.date.today()
    result, key, step = get_calendar(calendar_id=1,
                                     current_date=today,
                                     min_date=today,
                                     max_date=today + datetime.timedelta(days=365),
                                     locale="ru",
                                     is_process=True,
                                     callback_data=call)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {c.LSTEP[step]}:",
                              call.from_user.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
            data['check_in'] = result
            logger.info('–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {}'.format(result))

            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.edit_message_text(f"üîú –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ {result}",
                                  call.message.chat.id,
                                  call.message.message_id)

            bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:")
            calendar, step = get_calendar(calendar_id=2,
                                          min_date=result + datetime.timedelta(days=1),
                                          max_date=result + datetime.timedelta(days=365),
                                          locale="ru",
                                          )

            bot.send_message(call.from_user.id,
                             f"–í—ã–±–µ—Ä–∏—Ç–µ {c.LSTEP[step]}:",
                             reply_markup=calendar)
            bot.set_state(call.from_user.id, UserInfoState.check_out, call.message.chat.id)


@bot.callback_query_handler(func=MyStyleCalendar.func(calendar_id=2))
def get_check_out(call: CallbackQuery) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_check_out" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –û—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏ –≤—ã–µ–∑–¥–∞.
    2. –ó–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞.
    3. –û–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏.
    """
    with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
        result, key, step = get_calendar(calendar_id=2,
                                         current_date=data['check_in'],
                                         min_date=data['check_in'] + datetime.timedelta(days=1),
                                         max_date=data['check_in'] + datetime.timedelta(days=365),
                                         locale="ru",
                                         is_process=True,
                                         callback_data=call)
        if not result and key:
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {c.LSTEP[step]}:",
                                  call.from_user.id,
                                  call.message.message_id,
                                  reply_markup=key)

        elif result:
            data['check_out'] = result
            logger.info('–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {}'.format(data['check_out']))
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)

            bot.edit_message_text(f"üîô –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ {result}",
                                  call.message.chat.id,
                                  call.message.message_id)
            bot.send_message(call.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏\n'
                                                     '(–º–∞–∫—Å–∏–º—É–º 10):')


@bot.message_handler(state=UserInfoState.check_out)
def get_hotels_amt(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_hotels_amt" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –ó–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π.
    2. –û–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª—è.
    """
    if message.text.isdigit() and 0 < int(message.text) <= 10:
        bot.send_message(message.from_user.id, text='–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ?\n'
                                                    '–î–∞/–ù–µ—Ç')
        bot.set_state(message.from_user.id, UserInfoState.hotels_amt, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['hotels_amt'] = int(message.text)
            logger.info('–ö–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π: {}'.format(int(message.text)))
    else:
        bot.send_message(message.from_user.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:')


@bot.message_handler(state=UserInfoState.hotels_amt)
def need_photo(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "need_photo" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –û–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:
        * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª - '–¥–∞', —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —ç—Ç–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
        * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª - '–Ω–µ—Ç', —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–≤–æ–¥ –æ—Ç–µ–ª–µ–π.
    """
    if message.text.lower() == '–¥–∞':
        bot.send_message(message.from_user.id, text='–•–æ—Ä–æ—à–æ, –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ –æ—Ç–µ–ª—è –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏\n'
                                                    '(–Ω–µ –±–æ–ª—å—à–µ 5)?')
        bot.set_state(message.from_user.id, UserInfoState.picture_mode, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['picture_mode'] = True
            logger.info('–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
    elif message.text.lower() == '–Ω–µ—Ç':
        bot.send_message(message.from_user.id, text='–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–µ–ª–µ–π...')
        bot.set_state(message.from_user.id, UserInfoState.photos_amt, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['photos_amt'] = 0
            logger.info('–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º –±–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
        print_hotels(message)
    else:
        bot.send_message(message.from_user.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª! –í–≤–µ–¥–∏ –î–∞ –∏–ª–∏ –ù–µ—Ç:')


@bot.message_handler(state=UserInfoState.picture_mode)
def get_photos_amt(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_photos_amt" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –ü–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª-–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å–∏ –∏—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    if message.text.isdigit() and 0 < int(message.text) <= 5:
        bot.set_state(message.from_user.id, UserInfoState.photos_amt, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            bot.send_message(message.from_user.id, text='–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–µ–ª–µ–π...')
            data['photos_amt'] = int(message.text)
            logger.info('–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å: {}'.format(int(message.text)))
        print_hotels(message)
    else:
        bot.send_message(message.from_user.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5:')


def print_hotels(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "print_hotels" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –í—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Ñ–æ—Ç–æ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –æ—Ç–µ–ª—è.
    2. –ó–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ—Ç–µ–ª–µ –≤ –ë–î.
    """
    parse_list = api.get_hotels_list(message)
    hotels = api.process_hotels_list(parse_list, message)
    if len(hotels) > 0:
        bot.delete_message(message.chat.id, message.message_id + 1)
        bot.send_message(message.from_user.id, text='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:')
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            req_uid = db.add_req(message.from_user.id, data['datetime'], data['commands'], data['city_name'])
            for hotel in hotels:
                db.add_hotels(req_uid, hotel[1], f'https://www.hotels.com/ho{hotel[0]}')
                text = f"üè® –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {hotel[1]}" \
                       f"\nüåê –°–∞–π—Ç: https://www.hotels.com/ho{hotel[0]}" \
                       f"\nüåé –ê–¥—Ä–µ—Å: {hotel[2]}" \
                       f"\nüìå –û—Ç–∫—Ä—ã—Ç—å –≤ Google maps: http://maps.google.com/maps?z=12&t=m&q=loc:{hotel[8]}" \
                       f"\n‚Üî –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {hotel[3]} " \
                       f"\n1Ô∏è‚É£ –¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏: {hotel[4]} RUB" \
                       f"\nüí≥ –¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ ({hotel[9].days} –¥–Ω.): {hotel[5]} RUB" \
                       f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {hotel[6]}" \
                       f"\n‚ú® –†–µ–π—Ç–∏–Ω–≥ –ø–æ –º–Ω–µ–Ω–∏—é –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: {hotel[7]}"
                if data['photos_amt'] > 0:
                    photos = api.request_photo(id_hotel=hotel[0], message=message)
                    try:
                        media = form_media_group(photos=photos, text=text)
                        bot.send_media_group(chat_id=message.chat.id, media=media)
                    except TypeError:
                        bot.send_message(chat_id=message.chat.id, text='üì∑ –§–æ—Ç–æ –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n' + text,
                                         disable_web_page_preview=True)
                else:
                    bot.send_message(chat_id=message.chat.id, text=text, disable_web_page_preview=True)
            logger.info('–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–µ–ª—è—Ö –≤—ã–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    else:
        bot.send_message(message.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')


@bot.message_handler(commands=['lowprice', 'highprice', 'bestdeal'])
def start(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "start" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –û–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ '/lowprice', '/highprice' –∏ /bestdeal'.
    2. –ó–∞–ø–∏—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
    3. –ù–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—è –≤ –ë–î.
    """
    bot.set_state(message.from_user.id, UserInfoState.commands, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if message.text == '/lowprice':
            data['commands'] = 'lowprice'
            logger.info('–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - lowprice')
        elif message.text == '/highprice':
            data['commands'] = 'highprice'
            logger.info('–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - highprice')
        elif message.text == '/bestdeal':
            data['commands'] = 'bestdeal'
            logger.info('–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ - bestdeal')
        data['datetime'] = datetime.datetime.today()
        logger.info(f"–í—Ä–µ–º—è –∫–æ–º–∞–Ω–¥—ã: {data['datetime']}")
    mess = bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    db.db_creation()
    bot.register_next_step_handler(message=mess, callback=get_city_name)


def get_city_name(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è "get_city_name" –Ω—É–∂–Ω–∞ –¥–ª—è:
    1. –û–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ API, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
    –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑.
    """
    user_city = message.text
    url = "https://hotels4.p.rapidapi.com/locations/v2/search"
    querystring = {"query": user_city, "locale": "ru_RU"}
    user_response = api.get_request(url=url, headers=c.headers, params=querystring).text
    if json.loads(user_response)["moresuggestions"] > 0:
        bot.set_state(message.from_user.id, UserInfoState.city_name, message.chat.id)
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:

            data['city_name'] = user_city
            logger.info('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}'.format(message.from_user.id))
            logger.info('–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {}'.format(user_city))
        bot.send_message(message.from_user.id, '–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:', reply_markup=city_markup(user_response))
    else:
        bot.send_message(message.from_user.id, text='–î–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        start(message)
